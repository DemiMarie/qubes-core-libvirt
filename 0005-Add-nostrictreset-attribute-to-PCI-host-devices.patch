From 264f321508b5efde63323cf4ad449d487c66a33b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sat, 23 May 2015 04:25:01 +0200
Subject: [PATCH] Add 'nostrictreset' attribute to PCI host devices
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This allows to assign PCI device to some VM, even when the device does not
support any reset method. This may be dangerous in some cases (especially when
the device is later assigned to some other VM). But in some cases it still
makes sense - for example when the device is assigned to the same VM whole the
time.

Signed-off-by: Marek Marczykowski-GÃ³recki <marmarek@invisiblethingslab.com>
---
 docs/formatdomain.rst             |  2 ++
 src/conf/domain_conf.c            | 12 ++++++++++++
 src/conf/domain_conf.h            |  1 +
 src/conf/schemas/domaincommon.rng |  5 +++++
 src/hypervisor/virhostdev.c       |  2 ++
 src/util/virpci.c                 | 19 ++++++++++++++++++-
 src/util/virpci.h                 |  2 ++
 7 files changed, 42 insertions(+), 1 deletion(-)

diff --git a/docs/formatdomain.rst b/docs/formatdomain.rst
index 4deb290433..f040059172 100644
--- a/docs/formatdomain.rst
+++ b/docs/formatdomain.rst
@@ -4216,6 +4216,8 @@ or:
       starting the guest or hot-plugging the device and
       ``virNodeDeviceReAttach`` (or ``virsh nodedev-reattach``) after hot-unplug
       or stopping the guest.
+      Additionally when ``strictreset`` is ``no``, device will be assigned to
+      the domain, even when reset fails. The default is ``yes``.
    ``scsi``
       For SCSI devices, user is responsible to make sure the device is not used
       by host. If supported by the hypervisor and OS, the optional ``sgio`` (
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index ae258b51d6..502a3c87ac 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -6021,6 +6021,7 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
     virDomainHostdevSubsysSCSIVHost *scsihostsrc = &def->source.subsys.u.scsi_host;
     virDomainHostdevSubsysMediatedDev *mdevsrc = &def->source.subsys.u.mdev;
     virTristateBool managed;
+    g_autofree char *nostrictreset = NULL;
     g_autofree char *model = NULL;
     int rv;
 
@@ -6033,6 +6034,11 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
                                         VIR_XML_PROP_NONE, &managed));
     virTristateBoolToBool(managed, &def->managed);
 
+    if ((nostrictreset = virXMLPropString(node, "nostrictreset")) != NULL) {
+        if (STREQ(nostrictreset, "yes"))
+            def->nostrictreset = true;
+    }
+
     model = virXMLPropString(node, "model");
 
     /* @type is passed in from the caller rather than read from the
@@ -23205,6 +23211,8 @@ virDomainActualNetDefFormat(virBuffer *buf,
         virDomainHostdevDef *hostdef = virDomainNetGetActualHostdev(def);
         if  (hostdef && hostdef->managed)
             virBufferAddLit(buf, " managed='yes'");
+        if  (hostdef && hostdef->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
     }
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
@@ -23400,6 +23408,8 @@ virDomainNetDefFormat(virBuffer *buf,
     virBufferAsprintf(buf, "<interface type='%s'", typeStr);
     if (hostdef && hostdef->managed)
         virBufferAddLit(buf, " managed='yes'");
+    if (hostdef && hostdef->nostrictreset)
+        virBufferAddLit(buf, " nostrictreset='yes'");
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
                           virTristateBoolTypeToString(def->trustGuestRxFilters));
@@ -25491,6 +25501,8 @@ virDomainHostdevDefFormat(virBuffer *buf,
     if (def->mode == VIR_DOMAIN_HOSTDEV_MODE_SUBSYS) {
         virBufferAsprintf(buf, " managed='%s'",
                           def->managed ? "yes" : "no");
+        if (def->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
 
         if (def->source.subsys.type == VIR_DOMAIN_HOSTDEV_SUBSYS_TYPE_SCSI &&
             scsisrc->sgio)
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 1de6504859..e70aaeea31 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -388,6 +388,7 @@ struct _virDomainHostdevDef {
     bool readonly;
     bool shareable;
     virTristateBool writeFiltering;
+    bool nostrictreset;
     union {
         virDomainHostdevSubsys subsys;
         virDomainHostdevCaps caps;
diff --git a/src/conf/schemas/domaincommon.rng b/src/conf/schemas/domaincommon.rng
index bca958c55a..af2f9a86e4 100644
--- a/src/conf/schemas/domaincommon.rng
+++ b/src/conf/schemas/domaincommon.rng
@@ -3402,6 +3402,11 @@
               <ref name="virYesNo"/>
             </attribute>
           </optional>
+          <optional>
+            <attribute name="nostrictreset">
+              <ref name="virYesNo"/>
+            </attribute>
+          </optional>
           <interleave>
             <element name="source">
               <optional>
diff --git a/src/hypervisor/virhostdev.c b/src/hypervisor/virhostdev.c
index c0ce867596..d8abf0727e 100644
--- a/src/hypervisor/virhostdev.c
+++ b/src/hypervisor/virhostdev.c
@@ -255,6 +255,8 @@ virHostdevGetPCIHostDevice(const virDomainHostdevDef *hostdev,
         return -1;
     }
 
+    virPCIDeviceSetStrictReset(actual, !hostdev->nostrictreset);
+
     *pci = g_steal_pointer(&actual);
     return 0;
 }
diff --git a/src/util/virpci.c b/src/util/virpci.c
index 7800966963..ec7bd6bb2b 100644
--- a/src/util/virpci.c
+++ b/src/util/virpci.c
@@ -86,7 +86,7 @@ struct _virPCIDevice {
     /**/
 
     bool          managed;
-
+    bool          strictreset;
     virPCIStubDriver stubDriver;
 
     /* used by reattach function */
@@ -1075,6 +1075,9 @@ virPCIDeviceReset(virPCIDevice *dev,
                        dev->name,
                        err ? err->message :
                        _("no FLR, PM reset or bus reset available"));
+        if (!dev->strictreset)
+            /* do not fail */
+            ret = 0;
     }
 
  cleanup:
@@ -1462,6 +1465,8 @@ virPCIDeviceNew(const virPCIDeviceAddress *address)
 
     virPCIDeviceAddressCopy(&dev->address, address);
 
+    dev->strictreset    = true;
+
     dev->name = virPCIDeviceAddressAsString(&dev->address);
 
     dev->path = g_strdup_printf(PCI_SYSFS "devices/%s/config", dev->name);
@@ -1574,6 +1579,18 @@ virPCIDeviceGetManaged(virPCIDevice *dev)
     return dev->managed;
 }
 
+void
+virPCIDeviceSetStrictReset(virPCIDevice *dev, bool strictreset)
+{
+    dev->strictreset = strictreset;
+}
+
+unsigned int
+virPCIDeviceGetStrictReset(virPCIDevice *dev)
+{
+    return dev->strictreset;
+}
+
 void
 virPCIDeviceSetStubDriver(virPCIDevice *dev, virPCIStubDriver driver)
 {
diff --git a/src/util/virpci.h b/src/util/virpci.h
index 4d9193f24e..49350d0940 100644
--- a/src/util/virpci.h
+++ b/src/util/virpci.h
@@ -137,6 +137,8 @@ bool virPCIDeviceGetManaged(virPCIDevice *dev);
 void virPCIDeviceSetStubDriver(virPCIDevice *dev,
                                virPCIStubDriver driver);
 virPCIStubDriver virPCIDeviceGetStubDriver(virPCIDevice *dev);
+void virPCIDeviceSetStrictReset(virPCIDevice *dev, bool strictreset);
+unsigned int virPCIDeviceGetStrictReset(virPCIDevice *dev);
 virPCIDeviceAddress *virPCIDeviceGetAddress(virPCIDevice *dev);
 int virPCIDeviceSetUsedBy(virPCIDevice *dev,
                           const char *drv_name,
-- 
2.37.3

