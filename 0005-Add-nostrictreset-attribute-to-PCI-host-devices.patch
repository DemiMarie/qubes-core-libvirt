From cd4b686fb038933eb3e51ed94c9f51fcfd203e8c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sat, 23 May 2015 04:25:01 +0200
Subject: [PATCH] Add 'nostrictreset' attribute to PCI host devices
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This allows to assign PCI device to some VM, even when the device does not
support any reset method. This may be dangerous in some cases (especially when
the device is later assigned to some other VM). But in some cases it still
makes sense - for example when the device is assigned to the same VM whole the
time.

Signed-off-by: Marek Marczykowski-GÃ³recki <marmarek@invisiblethingslab.com>
---
 docs/formatdomain.html.in     |  3 +++
 docs/schemas/domaincommon.rng |  5 +++++
 src/conf/domain_conf.c        | 12 ++++++++++++
 src/conf/domain_conf.h        |  1 +
 src/util/virhostdev.c         |  2 ++
 src/util/virpci.c             | 18 +++++++++++++++++-
 src/util/virpci.h             |  2 ++
 7 files changed, 42 insertions(+), 1 deletion(-)

diff --git a/docs/formatdomain.html.in b/docs/formatdomain.html.in
index 775d3397f3..241ac6fee9 100644
--- a/docs/formatdomain.html.in
+++ b/docs/formatdomain.html.in
@@ -4806,6 +4806,9 @@
             or hot-plugging the device and <code>virNodeDeviceReAttach</code>
             (or <code>virsh nodedev-reattach</code>) after hot-unplug or
             stopping the guest.
+            Additionally when <code>strictreset</code> is "no", device will
+            be assigned to the domain, even when reset fails. The default is
+            "yes".
           </dd>
           <dt><code>scsi</code></dt>
           <dd>For SCSI devices, user is responsible to make sure the device
diff --git a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
index 24d3cb0d61..f8c067d92d 100644
--- a/docs/schemas/domaincommon.rng
+++ b/docs/schemas/domaincommon.rng
@@ -2809,6 +2809,11 @@
               <ref name="virYesNo"/>
             </attribute>
           </optional>
+          <optional>
+            <attribute name="nostrictreset">
+              <ref name="virYesNo"/>
+            </attribute>
+          </optional>
           <interleave>
             <element name="source">
               <optional>
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index acfadd6587..bd09afb56c 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -8111,6 +8111,7 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
     virDomainHostdevSubsysSCSIVHostPtr scsihostsrc = &def->source.subsys.u.scsi_host;
     virDomainHostdevSubsysMediatedDevPtr mdevsrc = &def->source.subsys.u.mdev;
     VIR_AUTOFREE(char *) managed = NULL;
+    VIR_AUTOFREE(char *) nostrictreset = NULL;
     VIR_AUTOFREE(char *) sgio = NULL;
     VIR_AUTOFREE(char *) rawio = NULL;
     VIR_AUTOFREE(char *) backendStr = NULL;
@@ -8127,6 +8128,11 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
             def->managed = true;
     }
 
+    if ((nostrictreset = virXMLPropString(node, "nostrictreset")) != NULL) {
+        if (STREQ(nostrictreset, "yes"))
+            def->nostrictreset = true;
+    }
+
     sgio = virXMLPropString(node, "sgio");
     rawio = virXMLPropString(node, "rawio");
     model = virXMLPropString(node, "model");
@@ -25207,6 +25213,8 @@ virDomainActualNetDefFormat(virBufferPtr buf,
         virDomainHostdevDefPtr hostdef = virDomainNetGetActualHostdev(def);
         if  (hostdef && hostdef->managed)
             virBufferAddLit(buf, " managed='yes'");
+        if  (hostdef && hostdef->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
     }
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
@@ -25402,6 +25410,8 @@ virDomainNetDefFormat(virBufferPtr buf,
     virBufferAsprintf(buf, "<interface type='%s'", typeStr);
     if (hostdef && hostdef->managed)
         virBufferAddLit(buf, " managed='yes'");
+    if (hostdef && hostdef->nostrictreset)
+        virBufferAddLit(buf, " nostrictreset='yes'");
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
                           virTristateBoolTypeToString(def->trustGuestRxFilters));
@@ -27171,6 +27181,8 @@ virDomainHostdevDefFormat(virBufferPtr buf,
     if (def->mode == VIR_DOMAIN_HOSTDEV_MODE_SUBSYS) {
         virBufferAsprintf(buf, " managed='%s'",
                           def->managed ? "yes" : "no");
+        if (def->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
 
         if (def->source.subsys.type == VIR_DOMAIN_HOSTDEV_SUBSYS_TYPE_SCSI &&
             scsisrc->sgio)
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index fbf1304758..eed6af2caa 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -343,6 +343,7 @@ struct _virDomainHostdevDef {
     bool missing;
     bool readonly;
     bool shareable;
+    bool nostrictreset;
     union {
         virDomainHostdevSubsys subsys;
         virDomainHostdevCaps caps;
diff --git a/src/util/virhostdev.c b/src/util/virhostdev.c
index d710193b94..dec68ca6e1 100644
--- a/src/util/virhostdev.c
+++ b/src/util/virhostdev.c
@@ -257,6 +257,8 @@ virHostdevGetPCIHostDevice(const virDomainHostdevDef *hostdev,
         return -1;
     }
 
+    virPCIDeviceSetStrictReset(actual, !hostdev->nostrictreset);
+
     VIR_STEAL_PTR(*pci, actual);
     return 0;
 }
diff --git a/src/util/virpci.c b/src/util/virpci.c
index ee78151e74..78c31f828d 100644
--- a/src/util/virpci.c
+++ b/src/util/virpci.c
@@ -80,7 +80,7 @@ struct _virPCIDevice {
     bool          has_flr;
     bool          has_pm_reset;
     bool          managed;
-
+    bool          strictreset;
     virPCIStubDriver stubDriver;
 
     /* used by reattach function */
@@ -990,6 +990,9 @@ virPCIDeviceReset(virPCIDevicePtr dev,
                        dev->name,
                        err ? err->message :
                        _("no FLR, PM reset or bus reset available"));
+        if (!dev->strictreset)
+            /* do not fail */
+            ret = 0;
     }
 
  cleanup:
@@ -1381,6 +1384,7 @@ virPCIDeviceNew(unsigned int domain,
     dev->address.bus = bus;
     dev->address.slot = slot;
     dev->address.function = function;
+    dev->strictreset    = true;
 
     if (virAsprintf(&dev->name,
                     VIR_PCI_DEVICE_ADDRESS_FMT,
@@ -1506,6 +1510,18 @@ virPCIDeviceGetManaged(virPCIDevicePtr dev)
     return dev->managed;
 }
 
+void
+virPCIDeviceSetStrictReset(virPCIDevicePtr dev, bool strictreset)
+{
+    dev->strictreset = strictreset;
+}
+
+unsigned int
+virPCIDeviceGetStrictReset(virPCIDevicePtr dev)
+{
+    return dev->strictreset;
+}
+
 void
 virPCIDeviceSetStubDriver(virPCIDevicePtr dev, virPCIStubDriver driver)
 {
diff --git a/src/util/virpci.h b/src/util/virpci.h
index dc20f91710..e654900345 100644
--- a/src/util/virpci.h
+++ b/src/util/virpci.h
@@ -128,6 +128,8 @@ bool virPCIDeviceGetManaged(virPCIDevice *dev);
 void virPCIDeviceSetStubDriver(virPCIDevicePtr dev,
                                virPCIStubDriver driver);
 virPCIStubDriver virPCIDeviceGetStubDriver(virPCIDevicePtr dev);
+void virPCIDeviceSetStrictReset(virPCIDevice *dev, bool strictreset);
+unsigned int virPCIDeviceGetStrictReset(virPCIDevicePtr dev);
 virPCIDeviceAddressPtr virPCIDeviceGetAddress(virPCIDevicePtr dev);
 int virPCIDeviceSetUsedBy(virPCIDevice *dev,
                           const char *drv_name,
-- 
2.21.0

