From 0d5ffe680aa1fad4ebb3091c8214b1aed5cabd21 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Fri, 29 Jul 2016 19:28:51 +0200
Subject: [PATCH 17/18] libxl: add support for PVH
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

To enable it, use <os><type machine="xenpvh">...</type></os>. It is
included in capabilities.xml.

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 src/libxl/libxl_capabilities.c | 40 +++++++++++++++++++++++++++++++---------
 src/libxl/libxl_conf.c         |  2 ++
 src/libxl/libxl_driver.c       |  6 ++++--
 3 files changed, 37 insertions(+), 11 deletions(-)

diff --git a/src/libxl/libxl_capabilities.c b/src/libxl/libxl_capabilities.c
index 0145116..c443353 100644
--- a/src/libxl/libxl_capabilities.c
+++ b/src/libxl/libxl_capabilities.c
@@ -45,11 +45,16 @@ VIR_LOG_INIT("libxl.libxl_capabilities");
 /* see xen-unstable.hg/xen/include/asm-x86/cpufeature.h */
 #define LIBXL_X86_FEATURE_PAE_MASK 0x40
 
+enum machine_type {
+    machine_hvm,
+    machine_pvh,
+    machine_pv,
+};
 
 struct guest_arch {
     virArch arch;
     int bits;
-    int hvm;
+    enum machine_type machine;
     int pae;
     int nonpae;
     int ia64_be;
@@ -296,7 +301,7 @@ libxlCapsInitGuests(libxl_ctx *ctx, virCapsPtr caps)
             /* Search for existing matching (model,hvm) tuple */
             for (i = 0; i < nr_guest_archs; i++) {
                 if ((guest_archs[i].arch == arch) &&
-                    guest_archs[i].hvm == hvm)
+                    guest_archs[i].machine == (hvm ? machine_hvm : machine_pv))
                     break;
             }
 
@@ -308,7 +313,7 @@ libxlCapsInitGuests(libxl_ctx *ctx, virCapsPtr caps)
                 nr_guest_archs++;
 
             guest_archs[i].arch = arch;
-            guest_archs[i].hvm = hvm;
+            guest_archs[i].machine = hvm ? machine_hvm : machine_pv;
 
             /* Careful not to overwrite a previous positive
                setting with a negative one here - some archs
@@ -320,23 +325,40 @@ libxlCapsInitGuests(libxl_ctx *ctx, virCapsPtr caps)
                 guest_archs[i].nonpae = nonpae;
             if (ia64_be)
                 guest_archs[i].ia64_be = ia64_be;
+
+            /* On Xen >= 4.4 add PVH for each HVM guest, and do it only once */
+            if ((ver_info->xen_version_major > 4 ||
+                    (ver_info->xen_version_major == 4 &&
+                     ver_info->xen_version_minor >= 4)) &&
+                    hvm && i == nr_guest_archs-1) {
+                i = nr_guest_archs;
+                /* Too many arch flavours - highly unlikely ! */
+                if (i >= ARRAY_CARDINALITY(guest_archs))
+                    continue;
+                nr_guest_archs++;
+                guest_archs[i].arch = arch;
+                guest_archs[i].machine = machine_pvh;
+            }
         }
     }
     regfree(&regex);
 
     for (i = 0; i < nr_guest_archs; ++i) {
         virCapsGuestPtr guest;
-        char const *const xen_machines[] = {guest_archs[i].hvm ? "xenfv" : "xenpv"};
+        char const *const xen_machines[] = {
+            guest_archs[i].machine == machine_hvm ? "xenfv" :
+                (guest_archs[i].machine == machine_pvh ? "xenpvh" : "xenpv")};
         virCapsGuestMachinePtr *machines;
 
         if ((machines = virCapabilitiesAllocMachines(xen_machines, 1)) == NULL)
             return -1;
 
         if ((guest = virCapabilitiesAddGuest(caps,
-                                             guest_archs[i].hvm ? VIR_DOMAIN_OSTYPE_HVM : VIR_DOMAIN_OSTYPE_XEN,
+                                             guest_archs[i].machine == machine_hvm ?
+                                              VIR_DOMAIN_OSTYPE_HVM : VIR_DOMAIN_OSTYPE_XEN,
                                              guest_archs[i].arch,
                                              LIBXL_EXECBIN_DIR "/qemu-system-i386",
-                                             (guest_archs[i].hvm ?
+                                             (guest_archs[i].machine == machine_hvm ?
                                               LIBXL_FIRMWARE_DIR "/hvmloader" :
                                               NULL),
                                              1,
@@ -375,7 +397,7 @@ libxlCapsInitGuests(libxl_ctx *ctx, virCapsPtr caps)
                                            0) == NULL)
             return -1;
 
-        if (guest_archs[i].hvm) {
+        if (guest_archs[i].machine != machine_pv) {
             if (virCapabilitiesAddGuestFeature(guest,
                                                "acpi",
                                                1,
@@ -390,7 +412,7 @@ libxlCapsInitGuests(libxl_ctx *ctx, virCapsPtr caps)
             if (virCapabilitiesAddGuestFeature(guest,
                                                "hap",
                                                1,
-                                               1) == NULL)
+                                               guest_archs[i].machine == machine_hvm) == NULL)
                 return -1;
         }
     }
@@ -409,7 +431,7 @@ libxlMakeDomainOSCaps(const char *machine,
 
     os->supported = true;
 
-    if (STREQ(machine, "xenpv"))
+    if (STREQ(machine, "xenpv") || STREQ(machine, "xenpvh"))
         return 0;
 
     capsLoader->supported = true;
diff --git a/src/libxl/libxl_conf.c b/src/libxl/libxl_conf.c
index b9f5a9f..c91a495 100644
--- a/src/libxl/libxl_conf.c
+++ b/src/libxl/libxl_conf.c
@@ -173,6 +173,8 @@ libxlMakeDomCreateInfo(libxl_ctx *ctx,
         }
     } else {
         c_info->type = LIBXL_DOMAIN_TYPE_PV;
+        if (STREQ(def->os.machine, "xenpvh"))
+            libxl_defbool_set(&c_info->pvh, true);
     }
 
     if (VIR_STRDUP(c_info->name, def->name) < 0)
diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index f32c38f..5c4ee63 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -5883,9 +5883,11 @@ libxlConnectGetDomainCapabilities(virConnectPtr conn,
         emulatorbin = "/usr/bin/qemu-system-x86_64";
 
     if (machine) {
-        if (STRNEQ(machine, "xenpv") && STRNEQ(machine, "xenfv")) {
+        if (STRNEQ(machine, "xenpv") &&
+                STRNEQ(machine, "xenpvh") &&
+                STRNEQ(machine, "xenfv")) {
             virReportError(VIR_ERR_INVALID_ARG, "%s",
-                           _("Xen only supports 'xenpv' and 'xenfv' machines"));
+                           _("Xen only supports 'xenpv', 'xenpvh' and 'xenfv' machines"));
             goto cleanup;
         }
     } else {
-- 
2.5.5

