From 0079875d92169c01c028a8c371b49e3ce39f5854 Mon Sep 17 00:00:00 2001
From: Marek Marczykowski <marmarek@invisiblethingslab.com>
Date: Fri, 5 Apr 2013 01:41:40 +0200
Subject: [PATCH 03/11] conf: support backend domain name in disk and network
 devices
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

At least Xen supports backend drivers in another domain (aka "driver
domain"). This patch introduces XML config option for such setting as
'domain' element with 'name' attribute. Verification its content is left
for the driver.

In the future some option will be needed for USB devices (hostdev
objects), but for now libxl doesn't have support for PVUSB.

Changes in v2:
 - describe in docs/formatdomain.html.in
 - enforce empty domain tag (only 'name' attribute allowed)

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 docs/formatdomain.html.in     | 29 +++++++++++++++++++++++++++++
 docs/schemas/domaincommon.rng | 16 ++++++++++++++++
 src/conf/domain_conf.c        | 27 +++++++++++++++++++++++++++
 src/conf/domain_conf.h        |  2 ++
 4 files changed, 74 insertions(+)

diff --git a/docs/formatdomain.html.in b/docs/formatdomain.html.in
index 691a451..8d9597f 100644
--- a/docs/formatdomain.html.in
+++ b/docs/formatdomain.html.in
@@ -2047,6 +2047,13 @@
           </li>
         </ul>
       </dd>
+      <dt><code>domain</code></dt>
+      <dd>The optional <code>domain</code> element allows specifying backend
+        domain (aka driver domain) for the device. If real device/file resides
+        in some other domain on the same host, you can use <code>name</code>
+        attribute to specify its name.
+        <span class="since">Since 1.0.7 (Xen only)</span>
+      </dd>
       <dt><code>boot</code></dt>
       <dd>Specifies that the disk is bootable. The <code>order</code>
         attribute determines the order in which devices will be tried during
@@ -3910,6 +3917,28 @@ qemu-kvm -net nic,model=? /dev/null
       element is unspecified is to have the link state <code>up</code>.
       <span class="since">Since 0.9.5</span>
     </p>
+    <h5><a name="elementDomain">Setting up network backend in driver domain</a></h5>
+<pre>
+  ...
+  &lt;devices&gt;
+    ...
+    &lt;interface type='bridge'&gt;
+      &lt;source bridge='br0'/&gt;
+      <b>&lt;domain name='netvm'/&gt;</b>
+    &lt;/interface&gt;
+    ...
+  &lt;/devices&gt;
+  ...</pre>
+
+    <p>
+      The optional <code>domain</code> element allows specifying backend
+      domain (aka driver domain) for the device. Use <code>name</code> attribute
+      to specify its name. You can use it to create direct network link between
+      domains (so data will not go through host system). Use with type 'ethernet'
+      to create plain network link, or with 'bridge' to connect to some bridge
+      inside driver domain.
+      <span class="since">Since 1.0.7 (Xen only)</span>
+    </p>
 
     <h4><a name="elementsInput">Input devices</a></h4>
 
diff --git a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
index af67123..672abd5 100644
--- a/docs/schemas/domaincommon.rng
+++ b/docs/schemas/domaincommon.rng
@@ -1046,6 +1046,14 @@
       </optional>
       <ref name="target"/>
       <optional>
+        <element name="domain">
+          <attribute name="name">
+            <ref name="domainName"/>
+          </attribute>
+          <empty/>
+        </element>
+      </optional>
+      <optional>
         <ref name="deviceBoot"/>
       </optional>
       <optional>
@@ -2189,6 +2197,14 @@
         </element>
       </optional>
       <optional>
+        <element name="domain">
+          <attribute name="name">
+            <ref name="domainName"/>
+          </attribute>
+          <empty/>
+        </element>
+      </optional>
+      <optional>
         <element name="model">
           <attribute name="type">
             <data type="string">
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index fd427e0..3162bec 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -1195,6 +1195,7 @@ virDomainDiskDefFree(virDomainDiskDefPtr def)
     VIR_FREE(def->vendor);
     VIR_FREE(def->product);
     VIR_FREE(def->script);
+    VIR_FREE(def->domain_name);
     virDomainDeviceInfoClear(&def->info);
 
     VIR_FREE(def);
@@ -1370,6 +1371,7 @@ void virDomainNetDefFree(virDomainNetDefPtr def)
 
     VIR_FREE(def->virtPortProfile);
     VIR_FREE(def->script);
+    VIR_FREE(def->domain_name);
     VIR_FREE(def->ifname);
 
     virDomainDeviceInfoClear(&def->info);
@@ -5231,6 +5233,7 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
     char *product = NULL;
     char *discard = NULL;
     char *script = NULL;
+    char *domain_name = NULL;
     int expected_secret_usage = -1;
     int auth_secret_usage = -1;
 
@@ -5298,6 +5301,9 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
             } else if (!script &&
                        xmlStrEqual(cur->name, BAD_CAST "script")) {
                 script = virXMLPropString(cur, "path");
+            } else if (!domain_name &&
+                       xmlStrEqual(cur->name, BAD_CAST "domain")) {
+                domain_name = virXMLPropString(cur, "name");
             } else if (xmlStrEqual(cur->name, BAD_CAST "geometry")) {
                 if (virXPathUInt("string(./geometry/@cyls)",
                                  ctxt, &def->geometry.cylinders) < 0) {
@@ -5604,6 +5610,11 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
         ctxt->node = saved_node;
     }
 
+    if (domain_name != NULL) {
+        def->domain_name = domain_name;
+        domain_name = NULL;
+    }
+
     if (target == NULL) {
         if (def->src.srcpool) {
             char *tmp;
@@ -5978,6 +5989,7 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
     VIR_FREE(vendor);
     VIR_FREE(product);
     VIR_FREE(script);
+    VIR_FREE(domain_name);
 
     ctxt->node = save_ctxt;
     return def;
@@ -6599,6 +6611,7 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
     char *mode = NULL;
     char *linkstate = NULL;
     char *addrtype = NULL;
+    char *domain_name = NULL;
     virNWFilterHashTablePtr filterparams = NULL;
     virDomainActualNetDefPtr actual = NULL;
     xmlNodePtr oldnode = ctxt->node;
@@ -6695,6 +6708,9 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
             } else if (!script &&
                        xmlStrEqual(cur->name, BAD_CAST "script")) {
                 script = virXMLPropString(cur, "path");
+            } else if (!domain_name &&
+                       xmlStrEqual(cur->name, BAD_CAST "domain")) {
+                domain_name = virXMLPropString(cur, "name");
             } else if (xmlStrEqual(cur->name, BAD_CAST "model")) {
                 model = virXMLPropString(cur, "type");
             } else if (xmlStrEqual(cur->name, BAD_CAST "driver")) {
@@ -6926,6 +6942,10 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
         def->script = script;
         script = NULL;
     }
+    if (domain_name != NULL) {
+        def->domain_name = domain_name;
+        domain_name = NULL;
+    }
     if (ifname != NULL) {
         def->ifname = ifname;
         ifname = NULL;
@@ -7064,6 +7084,7 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
     VIR_FREE(mode);
     VIR_FREE(linkstate);
     VIR_FREE(addrtype);
+    VIR_FREE(domain_name);
     virNWFilterHashTableFree(filterparams);
 
     return def;
@@ -15150,6 +15171,10 @@ virDomainDiskDefFormat(virBufferPtr buf,
 
     virBufferEscapeString(buf, "<script path='%s'/>\n", def->script);
 
+    if (def->domain_name) {
+        virBufferEscapeString(buf, "      <domain name='%s'/>\n", def->domain_name);
+    }
+
     virDomainDiskGeometryDefFormat(buf, def);
     virDomainDiskBlockIoDefFormat(buf, def);
 
@@ -15830,6 +15855,8 @@ virDomainNetDefFormat(virBufferPtr buf,
 
     virBufferEscapeString(buf, "<script path='%s'/>\n",
                           def->script);
+    if (def->domain_name)
+        virBufferEscapeString(buf, "<domain name='%s'/>\n", def->domain_name);
     if (def->ifname &&
         !((flags & VIR_DOMAIN_XML_INACTIVE) &&
           (STRPREFIX(def->ifname, VIR_NET_GENERATED_PREFIX)))) {
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 1fa3fc9..981aa60 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -646,6 +646,7 @@ struct _virDomainDiskDef {
     int sgio; /* enum virDomainDeviceSGIO */
     int discard; /* enum virDomainDiskDiscard */
     char *script;
+    char *domain_name; /* backend domain name */
 };
 
 
@@ -916,6 +917,7 @@ struct _virDomainNetDef {
         unsigned long sndbuf;
     } tune;
     char *script;
+    char *domain_name; /* backend domain name */
     char *ifname;
     virDomainDeviceInfo info;
     char *filter;
-- 
1.8.3.1

